// src/diff.ts
import {
  findBreakingChanges,
  findDangerousChanges
} from "graphql";
import { lexicographicSortSchema } from "graphql/utilities/index.js";
import disparity from "disparity";
import { loadSchema } from "@graphql-tools/load";
import { UrlLoader } from "@graphql-tools/url-loader";
import { JsonFileLoader } from "@graphql-tools/json-file-loader";
import { printSchemaWithDirectives } from "@graphql-tools/utils";
import { GraphQLFileLoader } from "@graphql-tools/graphql-file-loader";
import fetch from "node-fetch";
async function getDiff(leftSchemaLocation, rightSchemaLocation, options = {}) {
  var _a, _b;
  const getSchemaOptions = (customHeaders) => ({
    headers: { ...options.headers, ...customHeaders },
    skipGraphQLImport: false,
    descriptions: false,
    customFetch: fetch
  });
  const leftSchemaOptions = getSchemaOptions((_a = options.leftSchema) == null ? void 0 : _a.headers);
  const rightSchemaOptions = getSchemaOptions((_b = options.rightSchema) == null ? void 0 : _b.headers);
  let [leftSchema, rightSchema] = await Promise.all([
    loadSchema(leftSchemaLocation, {
      loaders: [new UrlLoader(), new JsonFileLoader(), new GraphQLFileLoader()],
      ...leftSchemaOptions
    }),
    loadSchema(rightSchemaLocation, {
      loaders: [new UrlLoader(), new JsonFileLoader(), new GraphQLFileLoader()],
      ...rightSchemaOptions
    })
  ]);
  if (!leftSchema || !rightSchema) {
    throw new Error("Schemas not defined");
  }
  if (options.sortSchema) {
    [leftSchema, rightSchema] = [
      lexicographicSortSchema(leftSchema),
      lexicographicSortSchema(rightSchema)
    ];
  }
  const [leftSchemaSDL, rightSchemaSDL] = [
    printSchemaWithDirectives(leftSchema),
    printSchemaWithDirectives(rightSchema)
  ];
  if (leftSchemaSDL === rightSchemaSDL) {
    return;
  }
  const diff = disparity.unified(leftSchemaSDL, rightSchemaSDL, {
    paths: [leftSchemaLocation, rightSchemaLocation]
  });
  const diffNoColor = disparity.unifiedNoColor(leftSchemaSDL, rightSchemaSDL, {
    paths: [leftSchemaLocation, rightSchemaLocation]
  });
  const dangerousChanges = findDangerousChanges(leftSchema, rightSchema);
  const breakingChanges = findBreakingChanges(leftSchema, rightSchema);
  return {
    diff,
    diffNoColor,
    dangerousChanges,
    breakingChanges
  };
}
export {
  getDiff
};
